{"version":3,"sources":["slices/example.js","reducers/index.js","store/index.js","sagas/example.js","sagas/index.js","Routes.js","pages/App.js","serviceWorker.js","index.js"],"names":["example","createSlice","name","initialState","data","reducers","update","state","action","payload","sagas","fetchExampleAsync","createAction","rootReducer","history","combineReducers","router","connectRouter","reducer","createHashHistory","sagaMiddleware","createSagaMiddleware","adminAppsSaga","put","exampleSlice","actions","message","console","error","takeLatest","rootSaga","all","exampleSaga","routes","path","exact","component","useState","todoList","setTodoList","inputValue","setInputValue","className","onSubmit","data-testid","placeholder","type","onChange","e","target","value","map","item","index","key","Routes","renderRoutes","Boolean","window","location","hostname","match","preloadedState","store","configureStore","middleware","routerMiddleware","enhancers","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"oTAGMA,EAAUC,YAAY,CAC1BC,KAAM,UACNC,aAAc,CACZC,KAAM,IAGRC,SAAU,CACRC,OAAQ,SAACC,EAAOC,GAAR,sBACHD,EADG,GAEHC,EAAOC,aAKhBT,EAAQU,MAAQ,CACdC,kBAAmBC,YAAa,8BAGnBZ,QCVAa,EANK,SAAAC,GAAO,OACzBC,0BAAgB,CACdC,OAAQC,YAAcH,GACtBd,QAASA,EAAQkB,WCARJ,EAAUK,cACVC,EAAiBC,c,wCCNpBV,G,WAYeW,GAZzB,SAAUX,EAAV,0EAEI,OAFJ,EAA8BF,QAA9B,kBAEUc,YACJC,EAAaC,QAAQnB,OAAO,CAC1BF,KAAM,CAAC,MAAO,aAJtB,uDAOasB,EAPb,KAOaA,QACTC,QAAQC,MAAMF,GARlB,qDAYe,SAAUJ,IAAV,iEACb,OADa,SACPO,YAAWL,EAAad,MAAMC,kBAAmBA,GAD1C,uC,eCXUmB,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CAACC,MADE,uC,4BCOR,IAAMC,EAAS,CACpB,CACEC,KAAM,IACNC,OAAO,EACPC,UCbQ,WAAO,IAAD,EACgBC,mBAAS,CAAC,WAAY,mBADtC,mBACTC,EADS,KACCC,EADD,OAEoBF,mBAAS,IAF7B,mBAETG,EAFS,KAEGC,EAFH,KAShB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,0CAGJ,0BAAMC,SAZW,WACnBJ,EAAY,GAAD,mBAAKD,GAAL,CAAeE,KAC1BC,EAAc,MAWV,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACb,2BACEA,UAAU,eACVE,cAAY,aACZC,YAAY,eACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIP,EAAcO,EAAEC,OAAOC,QACtCA,MAAOV,MAIb,yBAAKE,UAAU,OACb,yBAAKA,UAAU,YACb,4BACEA,UAAU,kBACVE,cAAY,WACZE,KAAK,UAHP,eAUN,yBAAKJ,UAAU,iBACb,yBAAKA,UAAU,YACb,qCACA,wBAAIE,cAAY,YACbN,EAASa,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,GACP,6BACGD,EACD,4BAAQV,UAAU,kBAAlB,gBDlChB,CACER,KAAM,SACNE,UAZJ,WACE,OAAO,yCAmBMmB,EAJA,kBACb,kBAAC,IAAD,CAAiBzC,QAASA,GAAU0C,YAAavB,K,YEZ/BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,INF0CC,EMEpCC,ENDUC,YAAe,CAC3B9C,QAASL,EAAYC,GACrBmD,WAAY,CAACC,YAAiBpD,GAAUM,GACxC0C,iBACAK,UAAW,KMFf/C,EAAegD,IAAItC,GAEnBuC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLD,QAAQC,MAAMA,EAAMF,c","file":"static/js/main.6c918b58.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, createAction } from '@reduxjs/toolkit';\n\nconst example = createSlice({\n  name: 'example',\n  initialState: {\n    data: []\n  },\n  // reducers support `immer` so you can mutate the state in slice.\n  reducers: {\n    update: (state, action) => ({\n      ...state,\n      ...action.payload\n    })\n  }\n});\n\nexample.sagas = {\n  fetchExampleAsync: createAction('example/fetchExampleAsync')\n};\n\nexport default example;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport example from 'slices/example';\n\nconst rootReducer = history =>\n  combineReducers({\n    router: connectRouter(history),\n    example: example.reducer\n  });\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { createHashHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport rootReducer from 'reducers';\n\n// Replace createHashHistory with createBrowserHistory\n// if you want to remove # in the url\nexport const history = createHashHistory();\nexport const sagaMiddleware = createSagaMiddleware();\n\nexport default function configureAppStore(preloadedState) {\n  const store = configureStore({\n    reducer: rootReducer(history),\n    middleware: [routerMiddleware(history), sagaMiddleware],\n    preloadedState,\n    enhancers: []\n  });\n\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\n    module.hot.accept('reducers', () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n}\n","import { put, takeLatest } from 'redux-saga/effects';\nimport exampleSlice from 'slices/example';\n\nfunction* fetchExampleAsync({ payload }) {\n  try {\n    yield put(\n      exampleSlice.actions.update({\n        data: ['Leo', 'ginger']\n      })\n    );\n  } catch ({ message }) {\n    console.error(message);\n  }\n}\n\nexport default function* adminAppsSaga() {\n  yield takeLatest(exampleSlice.sagas.fetchExampleAsync, fetchExampleAsync);\n}\n","import { all } from 'redux-saga/effects';\n\nimport exampleSaga from './example';\n\nexport default function* rootSaga() {\n  yield all([exampleSaga()]);\n}\n","import React from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { renderRoutes } from 'react-router-config';\nimport { history } from './store';\n\nimport App from 'pages/App';\n\nfunction About() {\n  return <div>About</div>;\n}\n\nexport const routes = [\n  {\n    path: '/',\n    exact: true,\n    component: App\n  },\n  {\n    path: '/about',\n    component: About\n  }\n];\n\nconst Routes = () => (\n  <ConnectedRouter history={history}>{renderRoutes(routes)}</ConnectedRouter>\n);\n\nexport default Routes;\n","import React, { useState } from 'react';\n\nconst App = () => {\n  const [todoList, setTodoList] = useState(['Buy Milk', 'Write tutorial']);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = () => {\n    setTodoList([...todoList, inputValue]);\n    setInputValue('');\n  };\n\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-md-6'>\n          <h2>Add Todo</h2>\n        </div>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <div className='row'>\n          <div className='col-md-6'>\n            <input\n              className='form-control'\n              data-testid='todo-input'\n              placeholder='Enter a task'\n              type='text'\n              onChange={e => setInputValue(e.target.value)}\n              value={inputValue}\n            />\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-md-6'>\n            <button\n              className='btn btn-primary'\n              data-testid='add-task'\n              type='submit'\n            >\n              Add Task\n            </button>\n          </div>\n        </div>\n      </form>\n      <div className='row todo-list'>\n        <div className='col-md-6'>\n          <h3>Lists</h3>\n          <ul data-testid='todos-ul'>\n            {todoList.map((item, index) => (\n              <li key={index}>\n                <div>\n                  {item}\n                  <button className='btn btn-danger'>X</button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureAppStore, { sagaMiddleware } from './store';\nimport rootSaga from './sagas';\nimport Routes from './Routes';\n\n// Global stylesheets\nimport './stylesheets/application.scss';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureAppStore();\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}